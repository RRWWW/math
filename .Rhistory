0 %in% -5:5
date_of_origin <- as.Date("1970-01-01")
as.integer(date_of_origin)
time_of_origin <- as.POSIXct("1970-01-01 00:00:00", tz = "GMT")
as.integer(time_of_origin)
7 %/% 3
four_seasons <- c("spring", "summer", "autumn", "winter")
four_seasons
favorite_season <- four_seasons[3]
favorite_season
favorite_seasons <- four_seasons[c(-2, -4)]
favorite_seasons
lucky_numbers <- c(7L, 24)
class(lucky_numbers[1])
lucky_numbers <- c(7L, FALSE)
lucky_numbers
class(lucky_numbers[2])
mixed_vars <- c(TRUE, 7L, 24, "spring")
mixed_vars
class(mixed_vars[1])
class(mixed_vars[2])
class(mixed_vars[3])
four_seasons <- c("spring", "summer", "autumn", "winter")
my_favorite_seasons <- four_seasons == "spring" | four_seasons == "autumn"
four_seasons[my_favorite_seasons]
rep(7L, times = 8)
rep("R", times = 10)
seq(from = 7, to = 77, by = 7)
11:20
four_seasons <- c("spring", "summer", "autumn", "winter")
four_seasons
four_seasons_factor <- factor(four_seasons)
four_seasons_factor
four_seasons <- c("spring", "summer", "autumn", "winter")
four_seasons_factor <- factor(four_seasons, ordered = TRUE, levels = c("summer", "winter", "spring", "autumn"))
four_seasons_factor
temperatures <- c("warm", "hot", "cold")
temp_factors <- factor(temperatures, ordered = TRUE, levels = c("cold", "warm", "hot"))
temp_factors
temperatures <- c("warm", "hot", "cold")
temp_factors <- factor(temperatures, ordered = TRUE)
temp_factors
my_mat <- matrix(1:6, nrow = 2)
my_mat
class(my_mat)
my_mat2 <- matrix(1:6, nrow = 2, byrow = TRUE)
my_mat2
my_mat2[2, 3]
my_mat2[2, ]
my_mat2[, 3]
filter <- my_mat2 < 6 & my_mat2 > 1
my_mat2[filter]
my_mat3 <- matrix(c(1, 2, TRUE, FALSE, 3, 4), nrow = 2)
my_mat3
team_name <- c("Chicago Bulls", "Golden State Warriors")
wins <- c(72, 73)
losses <- c(10, 9)
is_champion <- c(TRUE, FALSE)
season <- c("1995-96", "2015-16")
great_nba_teams <- data.frame(team_name, wins, losses, is_champion, season)
team_name <- c("Chicago Bulls", "Golden State Warriors")
wins <- c(72, 73)
losses <- c(10, 9)
is_champion <- c(TRUE, FALSE)
season <- c("1995-96", "2015-16")
great_nba_teams <- data.frame(team_name, wins, losses, is_champion, season)
great_nba_teams
bookdown::publish_book()
bookdown::render_book()
bookdown::render_book()
great_nba_teams[1, 1]
great_nba_teams[1, ]
great_nba_teams[, 1]
great_nba_teams[1, ]
team_name <- c("Chicago Bulls", "Golden State Warriors")
wins <- c(72, 73)
losses <- c(10, 9)
is_champion <- c(TRUE, FALSE)
season <- c("1995-96", "2015-16")
great_nba_teams <- data.frame(team_name, wins, losses, is_champion, season, stringsAsFactors = FALSE)
great_nba_teams[1, ]
team_name <- c("Chicago Bulls", "Golden State Warriors")
wins <- c(72, 73)
losses <- c(10, 9)
is_champion <- c(TRUE, FALSE)
season <- c("1995-96", "2015-16")
great_nba_teams <- data.frame(team_name, wins, losses, is_champion, season, stringsAsFactors = FALSE)
great_nba_teams[, 1]
team_name <- c("Chicago Bulls", "Golden State Warriors")
wins <- c(72, 73)
losses <- c(10, 9)
is_champion <- c(TRUE, FALSE)
season <- c("1995-96", "2015-16")
great_nba_teams <- data.frame(team_name, wins, losses, is_champion, season, stringsAsFactors = TRUE)
great_nba_teams[, 1]
team_name <- c("Chicago Bulls", "Golden State Warriors")
wins <- c(72, 73)
losses <- c(10, 9)
is_champion <- c(TRUE, FALSE)
season <- c("1995-96", "2015-16")
great_nba_teams <- data.frame(team_name, wins, losses, is_champion, season, stringsAsFactors = TRUE)
great_nba_teams[, 1]
team_name <- c("Chicago Bulls", "Golden State Warriors")
wins <- c(72, 73)
losses <- c(10, 9)
is_champion <- c(TRUE, FALSE)
season <- c("1995-96", "2015-16")
great_nba_teams <- data.frame(team_name, wins, losses, is_champion, season, stringsAsFactors = FALSE)
great_nba_teams[, 1]
great_nba_teams$team_name
great_nba_teams[, "team_name"]
filter <- great_nba_teams$is_champion == TRUE
great_nba_teams[filter, ]
str(great_nba_teams)
bookdown::publish_book()
# Assign the same value to multiple variables in one line
var1 <- var2 <- var3 <- "Orange"
# Print variable values
var1
var2
var3
# Assign the same value to multiple variables in one line
var1 <- var2 <- var3 <- "Orange"
# Print variable values
var1
var2
var3
# Legal variable names:
myvar <- "John"
my_var <- "John"
myVar <- "John"
MYVAR <- "John"
myvar2 <- "John"
.myvar <- "John"
# Illegal variable names:
2myvar <- "John"
# Legal variable names:
myvar <- "John"
my_var <- "John"
myVar <- "John"
MYVAR <- "John"
myvar2 <- "John"
.myvar <- "John"
## Illegal variable names:
# 2myvar <- "John"
# my-var <- "John"
# my var <- "John"
# _my_var <- "John"
# my_v@ar <- "John"
# TRUE <- "John"
my_function <- function() {
txt <<- "fantastic"
paste("R is", txt)
}
my_function()
print(txt)
txt <- "awesome"
my_function <- function() {
txt <<- "fantastic"
paste("R is", txt)
}
my_function()
paste("R is", txt)
bookdown::publish_book()
# An array with one dimension with values ranging from 1 to 24
thisarray <- c(1:24)
thisarray
# An array with more than one dimension
multiarray <- array(thisarray, dim = c(4, 3, 2))
multiarray
multiarray[2, 3, 2]
bookdown::publish_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::publish_book()
bookdown:::serve_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book()
bookdown::render_book()
bookdown::publish_book()
bookdown:::serve_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::publish_book()
bookdown:::serve_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::publish_book()
bookdown:::serve_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::publish_book()
reticulate::repl_python()
import seaborn as sns
import tikzplotlib
quit
library(reticulate)
# conda_list()
use_condaenv(condaenv = 'sandbox-3.9')
# conda_list()
use_condaenv(condaenv = 'sandbox-3.9')
conda_list()
use_condaenv(condaenv = 'sandbox-3.9')
use_condaenv(condaenv = 'sandbox-3.9')
library(reticulate)
conda_list()
conda_list()
use_condaenv(condaenv = 'sandbox-3.9')
reticulate::repl_python()
import seaborn as sns
import tikzplotlib
tips = sns.load_dataset("tips")
import seaborn as sns
quit
## import Seaborn (it will be automatically discovered in "r-reticulate")
seaborn <- import("seaborn")
use_condaenv(condaenv = 'sandbox-3.9')
library(reticulate)
conda_list()
conda_list()
library(reticulate)
use_condaenv(condaenv = 'sandbox-3.9')
## import Seaborn (it will be automatically discovered in "r-reticulate")
seaborn <- import("seaborn")
use_condaenv(condaenv = 'sandbox-3.9')
## import Seaborn (it will be automatically discovered in "r-reticulate")
seaborn <- import("seaborn")
reticulate::repl_python()
import seaborn as sns
import tikzplotlib
tips = sns.load_dataset("tips")
g = sns.displot(kind='hist', bins=20, kde='true',
data=tips,
x='total_bill',
hue='smoker',
col='sex'
)
g.set(xlabel='Total bill')
g.axes[0][0].set(title='Male')
g.axes[0][1].set(title='Female')
g.fig
tikzplotlib.get_tikz_code()
tikzplotlib.save("test.tex")
import seaborn as sns
tips = sns.load_dataset("tips")
sns.displot(kind='hist', bins=20, kde='true',
data=tips,
x='total_bill')
import tikzplotlib
# tikzplotlib.save("test.tex")
tikzplotlib.get_tikz_code()
import seaborn as sns
tips = sns.load_dataset("tips")
sns.displot(kind='hist', bins=20, kde='true',
data=tips,
x='total_bill')
import tikzplotlib
tikzplotlib.save("0-test.tex")
# tikzplotlib.get_tikz_code()
quit
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
?bookdown::preview_chapter
bookdown::preview_chapter("202403181222-MatPlotLib.Rmd")
tinytex::reinstall_tinytex(repository = "illinois")
bookdown:::serve_book()
bookdown::preview_chapter("202403181222-MatPlotLib.Rmd")
bookdown::preview_chapter("202403181222-MatPlotLib.Rmd")
bookdown::preview_chapter("202403181222-MatPlotLib.Rmd")
bookdown::preview_chapter("202403181222-MatPlotLib.Rmd")
bookdown:::serve_book()
tinytex::reinstall_tinytex(repository = "illinois")
bookdown::preview_chapter("202403181222-MatPlotLib.Rmd")
bookdown:::serve_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
library(reticulate)
## import TikZplotLib (it will be automatically discovered in "r-reticulate")
tikzplotlib <- import("tikzplotlib")
# virtualenv_list()
# virtualenv_python()
# use_virtualenv("r-reticulate")
conda_list()
# virtualenv_list()
# virtualenv_python()
# use_virtualenv("r-reticulate")
conda_list()
use_condaenv(condaenv = 'sandbox-3.9')
## import TikZplotLib (it will be automatically discovered in "r-reticulate")
tikzplotlib <- import("tikzplotlib")
## import TikZplotLib (it will be automatically discovered in "r-reticulate")
tikzplotlib <- import("tikzplotlib")
use_condaenv(condaenv = 'sandbox-3.9')
use_condaenv(condaenv = 'sandbox-3.9')
use_condaenv(condaenv = 'sandbox-3.9')
library(reticulate)
# conda_list()
use_condaenv(condaenv = 'sandbox-3.9')
## import TikZplotLib (it will be automatically discovered in "r-reticulate")
tikzplotlib <- import("tikzplotlib")
# conda_list()
use_condaenv(condaenv = 'sandbox-3.9')
library(reticulate)
# virtualenv_list()
# virtualenv_python()
# use_virtualenv("r-reticulate")
# conda_list()
use_condaenv(condaenv = 'sandbox-3.9')
## install TikZplotLib
# virtualenv_install("r-reticulate", "tikzplotlib")
## import TikZplotLib (it will be automatically discovered in "r-reticulate")
tikzplotlib <- import("tikzplotlib")
reticulate::repl_python()
import seaborn as sns
import seaborn as sns
tips = sns.load_dataset("tips")
sns.displot(kind='hist', bins=20, kde='true',
data=tips,
x='total_bill')
import tikzplotlib
# tikzplotlib.save("test.tex")
tikzplotlib.get_tikz_code()
from manim import *
class CreateCircle(Scene):
def construct(self):
circle = Circle()  # create a circle
circle.set_fill(PINK, opacity=0.5)  # set the color and transparency
self.play(Create(circle))  # show the circle on screen
import matplotlib.pyplot as plt
import seaborn as sns
penguins = sns.load_dataset("penguins")
sns.pairplot(data=penguins,
hue='species')
plt.savefig("test.svg")
import matplotlib.pyplot as plt
import seaborn as sns
penguins = sns.load_dataset("penguins")
sns.pairplot(data=penguins,
hue='species')
plt.savefig("test.eps")
# plt.savefig("test.eps", dpi=1200)
from manim import *
class CreateCircle(Scene):
def construct(self):
circle = Circle()  # create a circle
circle.set_fill(PINK, opacity=0.5)  # set the color and transparency
self.play(Create(circle))  # show the circle on screen
from manim import *
class CreateCircle(Scene):
def construct(self):
circle = Circle()  # create a circle
circle.set_fill(PINK, opacity=0.5)  # set the color and transparency
self.play(Create(circle))  # show the circle on screen
from manim import *
class CreateCircle(Scene):
def construct(self):
circle = Circle()  # create a circle
circle.set_fill(PINK, opacity=0.5)  # set the color and transparency
self.play(Create(circle))  # show the circle on screen
quit
manim -pql scene.py CreateCircle
bookdown::preview_chapter("202403190029-Manim.Rmd")
bookdown::preview_chapter("202403190029-Manim.Rmd")
bookdown::preview_chapter("202403190029-Manim.Rmd")
bookdown::preview_chapter("202403190029-Manim.Rmd")
bookdown::preview_chapter("202403190029-Manim.Rmd")
bookdown::preview_chapter("202403190029-Manim.Rmd")
bookdown::preview_chapter("202403190029-Manim.Rmd")
bookdown::preview_chapter("202403190029-Manim.Rmd")
bookdown::preview_chapter("202403190029-Manim.Rmd")
bookdown::preview_chapter("202403190029-Manim.Rmd")
bookdown::preview_chapter("202403190029-Manim.Rmd")
bookdown::preview_chapter("202403190029-Manim.Rmd")
bookdown::preview_chapter("202403190029-Manim.Rmd")
bookdown:::serve_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::publish_book()
bookdown:::serve_book()
bookdown:::serve_book()
library(DiagrammeR)
mermaid("
graph LR
A-->B
")
library(DiagrammeR)
mermaid("
graph LR
A-->B
")
library(DiagrammeR)
mermaid("
graph LR
A-->B
")
library(DiagrammeR)
mermaid("
graph LR
A-->B
")
library(DiagrammeR)
mermaid("
graph LR
A-->B
")
bookdown::publish_book()
idx
# iris species converted to type integer 1, 2, 3 for further using vectors
idx <- as.integer(iris[["Species"]])
idx
iris
bookdown:::serve_book()
iris[["Species"]]
iris$Species
as.integer(iris[["Species"]])
iris$Species
idx <- as.integer(iris[["Species"]])
idx
idx <- as.integer(iris[["Species"]])
idx
c(24, 21, 25)[idx]
idx <- as.integer(iris[["Species"]])
c(24, 21, 25)[idx]
bookdown:::serve_book()
install.packages("DiagrammeR")
bookdown:::serve_book()
install.packages("MSG")
install.packages("ggplot2")
install.packages("ggplot2")
bookdown:::serve_book()
install.packages("ggplot2")
install.packages("ggplot2")
bookdown:::serve_book()
install.packages("hexbin")
bookdown:::serve_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
install.packages("webshot2")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
install.packages("ggplot2")
bookdown::publish_book()
bookdown::preview_chapter("202401292317-Python.Rmd")
bookdown:::serve_book()
bookdown::publish_book()
bookdown::render_book()
bookdown:::serve_book()
bookdown::publish_book()
bookdown:::serve_book()
bookdown::publish_book()
bookdown::preview_chapter("202403232342-experimental-design.Rmd")
bookdown::publish_book()
bookdown::render_book()
bookdown::publish_book()
bookdown::preview_chapter("202403232342-experimental-design.Rmd")
bookdown::preview_chapter("202403232342-experimental-design.Rmd")
bookdown::publish_book()
bookdown::preview_chapter("202401260001-mathematics.Rmd")
bookdown::publish_book()
bookdown:::serve_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::publish_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown:::serve_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book()
bookdown::render_book()
bookdown::publish_book()
bookdown::publish_book()
bookdown::render_book()
bookdown::publish_book()
bookdown::publish_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::publish_book()
bookdown:::serve_book()
install.packages("MSG")
reticulate::repl_python()
s = 's = %r\nprint(s%%s)'
print(s%s)
quit
knitr::include_graphics("img/casler2015-fig1.png")
bookdown:::serve_book()
bookdown::preview_chapter("202403251238-quine.Rmd")
bookdown::publish_book()
bookdown::preview_chapter("202403232342-experimental-design.Rmd")
bookdown::render_book()
bookdown::publish_book()
bookdown::publish_book()
bookdown::publish_book()
bookdown::publish_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::publish_book()
bookdown::render_book()
bookdown::render_book()
bookdown::publish_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::publish_book()
bookdown::render_book()
bookdown::render_book()
bookdown::publish_book()
bookdown:::serve_book()
bookdown::render_book()
bookdown::publish_book()
bookdown::render_book()
bookdown::publish_book()
bookdown::render_book()
bookdown::publish_book()
