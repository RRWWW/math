rep("R", times = 10)
seq(from = 7, to = 77, by = 7)
11:20
seq(from = 7, to = 77, by = 7)
11:20
four_seasons
four_seasons_factor <- factor(four_seasons)
four_seasons_factor
four_seasons <- c("spring", "summer", "autumn", "winter")
four_seasons_factor <- factor(four_seasons, ordered = TRUE, levels = c("summer", "winter", "spring", "autumn"))
four_seasons_factor
temperatures <- c("warm", "hot", "cold")
temp_factors <- factor(temperatures, ordered = TRUE, levels = c("cold", "warm", "hot"))
temp_factors
temperatures <- c("warm", "hot", "cold")
temp_factors <- factor(temperatures, ordered = TRUE)
temp_factors
month.name
month.name
month.name[1]
month.name
month.name[1]
print(month)
for (month in month.name) {
print(month)
}
my_mat <- matrix(1:6, nrow = 2)
my_mat
class(my_mat)
my_mat <- matrix(1:6, nrow = 2, byrow = TRUE)
my_mat
my_mat[2, 3]
my_mat[2, 3]
my_mat[2, ]
my_mat[, 3]
filter <- my_mat < 6 & my_mat > 1
my_mat[filter]
filter <- my_mat < 6 & my_mat > 1
my_mat[filter]
R.version
a <- 23 # prime
a
combine <- c(11, 13) # twin prime
combine
# ?c
# help(c)
add <- function(x, y) {
return(x + y)
}
add(11, 13)
get_bmi <- function (bw, bh) {
return (bw/(bh/100)^2)
}
get_bmi(70, 170)
abs(-5:5)
# install.packages("magrittr")
library(magrittr)
-5:5 %>% abs()
# with readability but too many lines
sys_date <- Sys.Date()
sys_date_yr <- format(sys_date, format = "%Y")
sys_date_num <- as.numeric(sys_date_yr)
sys_date_num
# less line but also less readability
sys_date_num <- as.numeric(format(Sys.Date(), format = "%Y"))
sys_date_num
# use %>% operator to demonstrate data workflow or forward pipe
sys_date_num <- Sys.Date() %>%
format(format = "%Y") %>%
as.numeric()
sys_date_num
library(dplyr)
# install.packages("gapminder")
library(gapminder)
head(gapminder)
library(gapminder)
library(dplyr)
library(magrittr)
gapminder %>%
filter(year == 2007)
library(gapminder)
library(dplyr)
library(magrittr)
gapminder %>%
filter(year == 2007) %>%
select(country)
library(gapminder)
library(dplyr)
library(magrittr)
gapminder %>%
mutate(pop_in_thousands = pop / 1000)
library(gapminder)
library(dplyr)
library(magrittr)
gapminder %>%
arrange(year)
library(gapminder)
library(dplyr)
library(magrittr)
gapminder %>%
filter(year == 2007) %>%
summarise(ttl_pop = sum(as.numeric(pop)))
library(gapminder)
library(dplyr)
library(magrittr)
gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarise(ttl_pop = sum(as.numeric(pop)))
library(ggplot2)
library(gapminder)
gapminder_2007 <- gapminder %>%
filter(year == 2007)
scatter_plot <- ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point()
scatter_plot
library(ggplot2)
library(gapminder)
north_asia <- gapminder %>%
filter(country %in% c("China", "Japan", "Taiwan", "Korea, Rep."))
line_plot <- ggplot(north_asia, aes(x = year, y = gdpPercap, colour = country)) +
geom_line()
line_plot
library(ggplot2)
library(gapminder)
hist_plot <- ggplot(gapminder_2007, aes(x = gdpPercap)) +
geom_histogram()
hist_plot
hist_plot <- ggplot(gapminder_2007, aes(x = gdpPercap)) +
geom_histogram(bins = 20)
hist_plot
library(ggplot2)
library(gapminder)
box_plot <- ggplot(gapminder_2007, aes(x = continent, y = gdpPercap)) +
geom_boxplot()
box_plot
library(ggplot2)
library(gapminder)
gdpPercap_2007_na <- gapminder %>%
filter(year == 2007 & country %in% c("China", "Japan", "Taiwan", "Korea, Rep."))
bar_plot <- ggplot(gdpPercap_2007_na, aes(x = country, y = gdpPercap)) +
geom_bar(stat = "identity")
bar_plot
month.name
month.name[1]
for (month in month.name) {
print(month)
}
class(2L)
class(2.0L)
class(2.3L)
class(Sys.time())
0 %in% -5:5
date_of_origin <- as.Date("1970-01-01")
as.integer(date_of_origin)
time_of_origin <- as.POSIXct("1970-01-01 00:00:00", tz = "GMT")
as.integer(time_of_origin)
7 %/% 3
four_seasons <- c("spring", "summer", "autumn", "winter")
four_seasons
favorite_season <- four_seasons[3]
favorite_season
favorite_seasons <- four_seasons[c(-2, -4)]
favorite_seasons
lucky_numbers <- c(7L, 24)
class(lucky_numbers[1])
lucky_numbers <- c(7L, FALSE)
lucky_numbers
class(lucky_numbers[2])
mixed_vars <- c(TRUE, 7L, 24, "spring")
mixed_vars
class(mixed_vars[1])
class(mixed_vars[2])
class(mixed_vars[3])
four_seasons <- c("spring", "summer", "autumn", "winter")
my_favorite_seasons <- four_seasons == "spring" | four_seasons == "autumn"
four_seasons[my_favorite_seasons]
rep(7L, times = 8)
rep("R", times = 10)
seq(from = 7, to = 77, by = 7)
11:20
four_seasons <- c("spring", "summer", "autumn", "winter")
four_seasons
four_seasons_factor <- factor(four_seasons)
four_seasons_factor
four_seasons <- c("spring", "summer", "autumn", "winter")
four_seasons_factor <- factor(four_seasons, ordered = TRUE, levels = c("summer", "winter", "spring", "autumn"))
four_seasons_factor
temperatures <- c("warm", "hot", "cold")
temp_factors <- factor(temperatures, ordered = TRUE, levels = c("cold", "warm", "hot"))
temp_factors
temperatures <- c("warm", "hot", "cold")
temp_factors <- factor(temperatures, ordered = TRUE)
temp_factors
my_mat <- matrix(1:6, nrow = 2)
my_mat
class(my_mat)
my_mat2 <- matrix(1:6, nrow = 2, byrow = TRUE)
my_mat2
my_mat[2, 3]
my_mat[2, ]
my_mat[, 3]
filter <- my_mat < 6 & my_mat > 1
my_mat[filter]
my_mat3 <- matrix(c(1, 2, TRUE, FALSE, 3, 4), nrow = 2)
my_mat3
class(my_mat3[, 2])
class(my_mat3[, 2])
R.version
a <- 23 # prime
a
combine <- c(11, 13) # twin prime
combine
# ?c
# help(c)
add <- function(x, y) {
return(x + y)
}
add(11, 13)
get_bmi <- function (bw, bh) {
return (bw/(bh/100)^2)
}
get_bmi(70, 170)
abs(-5:5)
# install.packages("magrittr")
library(magrittr)
-5:5 %>% abs()
# with readability but too many lines
sys_date <- Sys.Date()
sys_date_yr <- format(sys_date, format = "%Y")
sys_date_num <- as.numeric(sys_date_yr)
sys_date_num
# less line but also less readability
sys_date_num <- as.numeric(format(Sys.Date(), format = "%Y"))
sys_date_num
# use %>% operator to demonstrate data workflow or forward pipe
sys_date_num <- Sys.Date() %>%
format(format = "%Y") %>%
as.numeric()
sys_date_num
library(dplyr)
# install.packages("gapminder")
library(gapminder)
head(gapminder)
library(gapminder)
library(dplyr)
library(magrittr)
gapminder %>%
filter(year == 2007)
library(gapminder)
library(dplyr)
library(magrittr)
gapminder %>%
filter(year == 2007) %>%
select(country)
library(gapminder)
library(dplyr)
library(magrittr)
gapminder %>%
mutate(pop_in_thousands = pop / 1000)
library(gapminder)
library(dplyr)
library(magrittr)
gapminder %>%
arrange(year)
library(gapminder)
library(dplyr)
library(magrittr)
gapminder %>%
filter(year == 2007) %>%
summarise(ttl_pop = sum(as.numeric(pop)))
library(gapminder)
library(dplyr)
library(magrittr)
gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarise(ttl_pop = sum(as.numeric(pop)))
library(ggplot2)
library(gapminder)
gapminder_2007 <- gapminder %>%
filter(year == 2007)
scatter_plot <- ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point()
scatter_plot
library(ggplot2)
library(gapminder)
north_asia <- gapminder %>%
filter(country %in% c("China", "Japan", "Taiwan", "Korea, Rep."))
line_plot <- ggplot(north_asia, aes(x = year, y = gdpPercap, colour = country)) +
geom_line()
line_plot
library(ggplot2)
library(gapminder)
hist_plot <- ggplot(gapminder_2007, aes(x = gdpPercap)) +
geom_histogram()
hist_plot
hist_plot <- ggplot(gapminder_2007, aes(x = gdpPercap)) +
geom_histogram(bins = 20)
hist_plot
library(ggplot2)
library(gapminder)
box_plot <- ggplot(gapminder_2007, aes(x = continent, y = gdpPercap)) +
geom_boxplot()
box_plot
library(ggplot2)
library(gapminder)
gdpPercap_2007_na <- gapminder %>%
filter(year == 2007 & country %in% c("China", "Japan", "Taiwan", "Korea, Rep."))
bar_plot <- ggplot(gdpPercap_2007_na, aes(x = country, y = gdpPercap)) +
geom_bar(stat = "identity")
bar_plot
month.name
month.name[1]
for (month in month.name) {
print(month)
}
class(2L)
class(2.0L)
class(2.3L)
class(Sys.time())
0 %in% -5:5
date_of_origin <- as.Date("1970-01-01")
as.integer(date_of_origin)
time_of_origin <- as.POSIXct("1970-01-01 00:00:00", tz = "GMT")
as.integer(time_of_origin)
7 %/% 3
four_seasons <- c("spring", "summer", "autumn", "winter")
four_seasons
favorite_season <- four_seasons[3]
favorite_season
favorite_seasons <- four_seasons[c(-2, -4)]
favorite_seasons
lucky_numbers <- c(7L, 24)
class(lucky_numbers[1])
lucky_numbers <- c(7L, FALSE)
lucky_numbers
class(lucky_numbers[2])
mixed_vars <- c(TRUE, 7L, 24, "spring")
mixed_vars
class(mixed_vars[1])
class(mixed_vars[2])
class(mixed_vars[3])
four_seasons <- c("spring", "summer", "autumn", "winter")
my_favorite_seasons <- four_seasons == "spring" | four_seasons == "autumn"
four_seasons[my_favorite_seasons]
rep(7L, times = 8)
rep("R", times = 10)
seq(from = 7, to = 77, by = 7)
11:20
four_seasons <- c("spring", "summer", "autumn", "winter")
four_seasons
four_seasons_factor <- factor(four_seasons)
four_seasons_factor
four_seasons <- c("spring", "summer", "autumn", "winter")
four_seasons_factor <- factor(four_seasons, ordered = TRUE, levels = c("summer", "winter", "spring", "autumn"))
four_seasons_factor
temperatures <- c("warm", "hot", "cold")
temp_factors <- factor(temperatures, ordered = TRUE, levels = c("cold", "warm", "hot"))
temp_factors
temperatures <- c("warm", "hot", "cold")
temp_factors <- factor(temperatures, ordered = TRUE)
temp_factors
my_mat <- matrix(1:6, nrow = 2)
my_mat
class(my_mat)
my_mat2 <- matrix(1:6, nrow = 2, byrow = TRUE)
my_mat2
my_mat2[2, 3]
my_mat2[2, ]
my_mat2[, 3]
filter <- my_mat2 < 6 & my_mat2 > 1
my_mat2[filter]
my_mat3 <- matrix(c(1, 2, TRUE, FALSE, 3, 4), nrow = 2)
my_mat3
team_name <- c("Chicago Bulls", "Golden State Warriors")
wins <- c(72, 73)
losses <- c(10, 9)
is_champion <- c(TRUE, FALSE)
season <- c("1995-96", "2015-16")
great_nba_teams <- data.frame(team_name, wins, losses, is_champion, season)
team_name <- c("Chicago Bulls", "Golden State Warriors")
wins <- c(72, 73)
losses <- c(10, 9)
is_champion <- c(TRUE, FALSE)
season <- c("1995-96", "2015-16")
great_nba_teams <- data.frame(team_name, wins, losses, is_champion, season)
great_nba_teams
bookdown::publish_book()
bookdown::render_book()
bookdown::render_book()
great_nba_teams[1, 1]
great_nba_teams[1, ]
great_nba_teams[, 1]
great_nba_teams[1, ]
team_name <- c("Chicago Bulls", "Golden State Warriors")
wins <- c(72, 73)
losses <- c(10, 9)
is_champion <- c(TRUE, FALSE)
season <- c("1995-96", "2015-16")
great_nba_teams <- data.frame(team_name, wins, losses, is_champion, season, stringsAsFactors = FALSE)
great_nba_teams[1, ]
team_name <- c("Chicago Bulls", "Golden State Warriors")
wins <- c(72, 73)
losses <- c(10, 9)
is_champion <- c(TRUE, FALSE)
season <- c("1995-96", "2015-16")
great_nba_teams <- data.frame(team_name, wins, losses, is_champion, season, stringsAsFactors = FALSE)
great_nba_teams[, 1]
team_name <- c("Chicago Bulls", "Golden State Warriors")
wins <- c(72, 73)
losses <- c(10, 9)
is_champion <- c(TRUE, FALSE)
season <- c("1995-96", "2015-16")
great_nba_teams <- data.frame(team_name, wins, losses, is_champion, season, stringsAsFactors = TRUE)
great_nba_teams[, 1]
team_name <- c("Chicago Bulls", "Golden State Warriors")
wins <- c(72, 73)
losses <- c(10, 9)
is_champion <- c(TRUE, FALSE)
season <- c("1995-96", "2015-16")
great_nba_teams <- data.frame(team_name, wins, losses, is_champion, season, stringsAsFactors = TRUE)
great_nba_teams[, 1]
team_name <- c("Chicago Bulls", "Golden State Warriors")
wins <- c(72, 73)
losses <- c(10, 9)
is_champion <- c(TRUE, FALSE)
season <- c("1995-96", "2015-16")
great_nba_teams <- data.frame(team_name, wins, losses, is_champion, season, stringsAsFactors = FALSE)
great_nba_teams[, 1]
great_nba_teams$team_name
great_nba_teams[, "team_name"]
filter <- great_nba_teams$is_champion == TRUE
great_nba_teams[filter, ]
str(great_nba_teams)
bookdown::publish_book()
# Assign the same value to multiple variables in one line
var1 <- var2 <- var3 <- "Orange"
# Print variable values
var1
var2
var3
# Assign the same value to multiple variables in one line
var1 <- var2 <- var3 <- "Orange"
# Print variable values
var1
var2
var3
# Legal variable names:
myvar <- "John"
my_var <- "John"
myVar <- "John"
MYVAR <- "John"
myvar2 <- "John"
.myvar <- "John"
# Illegal variable names:
2myvar <- "John"
# Legal variable names:
myvar <- "John"
my_var <- "John"
myVar <- "John"
MYVAR <- "John"
myvar2 <- "John"
.myvar <- "John"
## Illegal variable names:
# 2myvar <- "John"
# my-var <- "John"
# my var <- "John"
# _my_var <- "John"
# my_v@ar <- "John"
# TRUE <- "John"
my_function <- function() {
txt <<- "fantastic"
paste("R is", txt)
}
my_function()
print(txt)
txt <- "awesome"
my_function <- function() {
txt <<- "fantastic"
paste("R is", txt)
}
my_function()
paste("R is", txt)
bookdown::publish_book()
# An array with one dimension with values ranging from 1 to 24
thisarray <- c(1:24)
thisarray
# An array with more than one dimension
multiarray <- array(thisarray, dim = c(4, 3, 2))
multiarray
multiarray[2, 3, 2]
bookdown::publish_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::publish_book()
bookdown:::serve_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book()
bookdown::render_book()
bookdown::publish_book()
bookdown:::serve_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::publish_book()
bookdown:::serve_book()
bookdown::render_book(output_format = "bookdown::pdf_book")
bookdown::publish_book()
